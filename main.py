"""
TODO: 

–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–∫—É (—Å–±—Ä–æ—Å–∏—Ç—å –µ–¥—É)

–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–µ–ª –¥–æ –ª–∏–º–∏—Ç–∞
"""



from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types.input_file import InputFile
import asyncio
import aioschedule
from config import TOKEN
import datetime
import json
import parse_pfc
import os
import logging

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage) 
admins_id = [834981315, 779981400,1091119932]

class Form(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    goal = State()
    activity = State()


class FormNewWeight(StatesGroup):
    new_weight = State()


class FormFood(StatesGroup):
    food = State()


class AdminForm(StatesGroup):
    text = State()

def count_norm_of_calories(user_info):
    if user_info['activity'] == "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –Ω–∏–∫–∞–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π":
        kfa = 1
    elif user_info['activity'] == "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ–±–æ–ª—å—à–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)":
        kfa = 1.3
    else:
        kfa = 1.5
    if user_info['goal'] == "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":
        kc = 1.1
    elif user_info['goal'] == "–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ":
        kc = 1
    else:
        kc = 0.9
    if user_info['gender'] == '–ñ–µ–Ω—Å–∫–∏–π':
        if 18 <= int(user_info['age']) <= 30:
            user_info['norm_of_calories'] = round((0.062 * float(user_info['weight']) + 2.036) * 240 * kfa * kc)
        elif 30 < int(user_info['age']) <= 60:
            user_info['norm_of_calories'] = round((0.034 * float(user_info['weight']) + 3.538) * 240 * kfa * kc)
        else:
            user_info['norm_of_calories'] = round((0.038 * float(user_info['weight']) + 2.755) * 240 * kfa * kc)
    else:
        if 18 <= int(user_info['age']) <= 30:
            user_info['norm_of_calories'] = round((0.063 * float(user_info['weight']) + 2.896) * 240 * kfa * kc)
        elif 30 < int(user_info['age']) <= 60:
            user_info['norm_of_calories'] = round((0.048 * float(user_info['weight']) + 3.653) * 240 * kfa * kc)
        else:
            user_info['norm_of_calories'] = round((0.049 * float(user_info['weight']) + 2.459) * 240 * kfa * kc)
    return user_info


def count_norm_of_pfc(user_info):
    proteins = round(float(user_info['weight']) * 1.75)
    fats = round(float(user_info['weight']) * 1.15)
    carbohydrates = round(float(user_info['weight']) * 2)
    user_info['norm_of_pfc'] = {
        "proteins": proteins,
        "fats": fats,
        "carbohydrates": carbohydrates
    }
    return user_info

def main_menu_text(message):
    with open(f'users/user_info_{message.chat.id}.json', 'r', encoding='utf-8') as file:
        user_info = json.load(file)

    remaining_water = user_info['norm_of_water'] / 0.25
    water_emoji = "ü•õ" * int(remaining_water)

    text = f"""{f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':^44}
–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã —Å—ä–µ–ª–∏ {user_info["calories"]}/{user_info["norm_of_calories"]} –∫–∫–∞–ª
–ë–ñ–£: 
üçñ –ë–µ–ª–∫–∏: {user_info["pfc"]["proteins"]}/{user_info["norm_of_pfc"]["proteins"]}
ü•ë –ñ–∏—Ä—ã: {user_info["pfc"]["fats"]}/{user_info["norm_of_pfc"]["fats"]}
üçö –£–≥–ª–µ–≤–æ–¥—ã: {user_info["pfc"]["carbohydrates"]}/{user_info["norm_of_pfc"]["carbohydrates"]}

–í–æ–¥–∞: {water_emoji}"""

    return text

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å"))
    await message.answer(
        f"–ü–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å ?\n"
        f"–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - @edge0fsanity\n"
        f"–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —ç—Ç–∏ 2 –ø—Ä–∏–º–µ—Ä–∞ ?", reply_markup=kb)
    await bot.send_photo(message.from_user.id, photo=InputFile("start_picture.jpg"))
    await bot.send_photo(message.from_user.id, photo=InputFile("meal_message_example.jpg"))


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å"))
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è –±–æ—Ç, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å "
        f"—Ç–≤–æ—ë —Ç–µ–ª–æ "
        f"–∑–¥–æ—Ä–æ–≤—ã–º, "
        f"–∞ –≤ –∑–¥–æ—Ä–æ–≤–æ–º —Ç–µ–ª–µ - –∑–¥–æ—Ä–æ–≤—ã–π –¥—É—Ö", reply_markup=kb)
    await bot.send_photo(message.from_user.id, photo=InputFile("start_picture.jpg"))
    


@dp.message_handler(text="–ù–∞—á–∞—Ç—å")
async def start(message: types.Message):
    if os.path.exists(f"users/user_info_{message.chat.id}.json"):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")).row(
            types.KeyboardButton('–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è')).row(types.KeyboardButton('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'))
        
        text = main_menu_text(message)
        await message.answer(text, reply_markup=kb)
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
        await message.answer("–£ –º–µ–Ω—è –Ω–µ—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É", reply_markup=kb)


@dp.message_handler(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def form(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"),
                                                            types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π"))
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=kb)
    await Form.next()


@dp.message_handler(state=Form.gender)
async def form(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    async with state.proxy() as data:
        data['gender'] = message.text
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"))
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=kb)
    await Form.next()


@dp.message_handler(state=Form.age)
async def form(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"),
                                                                types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π"))
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=kb)
        await state.finish()
        await Form.gender.set()
        return
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    async with state.proxy() as data:
        data['age'] = message.text
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"))
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≤–µ—Å–∏—Ç–µ (–≤ –∫–≥)?", reply_markup=kb)
    await Form.next()


@dp.message_handler(state=Form.weight)
async def form(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"),
                                                                types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π"))
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=kb)
        await state.finish()
        await Form.gender.set()
        return
    # check that message.text is int or float
    if not message.text.replace('.', '', 1).replace(',', '', 1).isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    async with state.proxy() as data:
        data['weight'] = message.text
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")).row(
        types.KeyboardButton(text="–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ")).row(
        types.KeyboardButton(text="–°–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã"),types.KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ'))
    await message.answer("–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?", reply_markup=kb)
    await Form.next()


@dp.message_handler(state=Form.goal)
async def form(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"),
                                                                types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π"))
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=kb)
        await state.finish()
        await Form.gender.set()
        return
    if message.text not in ["–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ", "–°–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Å—Å—ã"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    async with state.proxy() as data:
        data['goal'] = message.text
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(
        types.KeyboardButton(text="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –Ω–∏–∫–∞–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")).row(
        types.KeyboardButton(text='–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ–±–æ–ª—å—à–∏–µ '
                                    '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)')).row(
        types.KeyboardButton(text='–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ('
                                    '—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –±–æ–ª–µ–µ 4-—Ö —Ä–∞–∑ –≤ '
                                    '–Ω–µ–¥–µ–ª—é)')).row(types.KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ'))
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=kb)
    await Form.next()


@dp.message_handler(state=Form.activity)
async def form(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"),
                                                                types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π"))
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=kb)
        await state.finish()
        await Form.gender.set()
        return
    if message.text not in ["–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –Ω–∏–∫–∞–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "
                            "(–Ω–µ–±–æ–ª—å—à–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)",
                            "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –±–æ–ª–µ–µ 4-—Ö —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    async with state.proxy() as data:
        data['activity'] = message.text
    # count norm of water, round to nearest number that divisible by 0.250
    norm_of_water = float(data['weight']) * 0.03
    norm_of_water = round(norm_of_water * 4) / 4
    user_info = {
        "gender": data['gender'],
        "age": data['age'],
        "weight": data['weight'],
        "goal": data['goal'],
        "activity": data['activity'],
        "water_reminder": "off",
        "norm_of_water": norm_of_water,
        "date_for_water": datetime.datetime.now().strftime("%Y-%m-%d"),
        "date_for_calories_and_pfc": datetime.datetime.now().strftime("%Y-%m-%d"),
        "calories": 0,
        "pfc": {
            "proteins": 0,
            "fats": 0,
            "carbohydrates": 0
        }
    }
    user_info = count_norm_of_calories(user_info)
    user_info = count_norm_of_pfc(user_info)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    with open(f"users/user_info_{message.chat.id}.json", 'w', encoding='utf-8') as file:
        json.dump(user_info, file, ensure_ascii=False, indent=4)
    await state.finish()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã !", reply_markup=kb)


@dp.message_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")).row(
        types.KeyboardButton('–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è')).row(types.KeyboardButton('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'))

    text =  main_menu_text(message)
    await message.answer(text, reply_markup=kb)


@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def main_menu(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")).row(
        types.KeyboardButton('–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è')).row(types.KeyboardButton('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'))
    
    text = main_menu_text(message)
    await message.answer(text, reply_markup=kb)


@dp.message_handler(text="–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    try:
        with open(f"users/user_info_{message.chat.id}.json", 'r', encoding='utf-8') as file:
            user_info = json.load(file)
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')).row(
            types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞')).row(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                            f"–ü–æ–ª: {user_info['gender']}\n"
                            f"–í–æ–∑—Ä–∞—Å—Ç: {user_info['age']}\n"
                            f"–í–µ—Å: {user_info['weight']}\n"
                            f"–¶–µ–ª—å: {user_info['goal']}\n"
                            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info['activity']}", reply_markup=kb)
    except FileNotFoundError:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É", reply_markup=kb)


@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def edit_profile(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")).row(
        types.KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∞–Ω–∫–µ—Ç—É", reply_markup=kb)


@dp.message_handler(text="–ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞") # –§—É–Ω–∫—Ü–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏
async def weight_change(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–µ—Å", reply_markup=types.ReplyKeyboardRemove())
    await FormNewWeight.new_weight.set()


@dp.message_handler(state=FormNewWeight.new_weight)     # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
async def weight_change(message: types.Message, state: FSMContext):
    if not message.text.replace('.', '', 1).replace(',', '', 1).isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    async with state.proxy() as data:
        data['new_weight'] = message.text
    with open(f"users/user_info_{message.chat.id}.json", 'r', encoding='utf-8') as file:
        user_info = json.load(file)
    user_info['weight'] = data['new_weight']
    user_info = count_norm_of_calories(user_info)
    user_info = count_norm_of_pfc(user_info)
    with open(f"users/user_info_{message.chat.id}.json", 'w', encoding='utf-8') as file:
        json.dump(user_info, file, ensure_ascii=False, indent=4)
    await state.finish()
    await message.answer("–í–∞—à –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).row(
        types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
                        )


@dp.message_handler(text="–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è")
async def food_diary(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω")).row(
        types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏')).row(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer("–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", reply_markup=kb)


@dp.message_handler(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def reminder(message: types.Message):
    with open(f"users/user_info_{message.chat.id}.json", 'r', encoding='utf-8') as file:
        user_info = json.load(file)
    if user_info['water_reminder'] == "off":
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å")).row(
            types.KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥—ã –≤—ã–∫–ª—é—á–µ–Ω—ã", reply_markup=kb)
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å")).row(
            types.KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥—ã –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=kb)


@dp.message_handler(text="–í–∫–ª—é—á–∏—Ç—å")
async def reminder_on(message: types.Message):
    with open(f"users/user_info_{message.chat.id}.json", 'r', encoding='utf-8') as file:
        user_info = json.load(file)
    user_info['water_reminder'] = "on"
    with open(f"users/user_info_{message.chat.id}.json", 'w', encoding='utf-8') as file:
        json.dump(user_info, file, ensure_ascii=False, indent=4)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å")).row(
        types.KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥—ã –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=kb)


@dp.message_handler(text="–í—ã–∫–ª—é—á–∏—Ç—å")
async def reminder_off(message: types.Message):
    with open(f"users/user_info_{message.chat.id}.json", 'r', encoding='utf-8') as file:
        user_info = json.load(file)
    user_info['water_reminder'] = "off"
    with open(f"users/user_info_{message.chat.id}.json", 'w', encoding='utf-8') as file:
        json.dump(user_info, file, ensure_ascii=False, indent=4)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å")).row(
        types.KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥—ã –≤—ã–∫–ª—é—á–µ–Ω—ã", reply_markup=kb)


@dp.message_handler(text="–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω")
async def drink_glass(message: types.Message):
    with open(f"users/user_info_{message.chat.id}.json", 'r', encoding='utf-8') as file:
        user_info = json.load(file)
    # if now time - water reminder time >= 24 hours, then update date for water and norm of water
    if (datetime.datetime.now() - datetime.datetime.strptime(user_info['date_for_water'], "%Y-%m-%d")).days >= 1:
        user_info['date_for_water'] = datetime.datetime.now().strftime("%Y-%m-%d")
        norm_of_water = float(user_info['weight']) * 0.03
        norm_of_water = round(norm_of_water * 4) / 4
        user_info['norm_of_water'] = norm_of_water - 0.25
        with open(f"users/user_info_{message.chat.id}.json", 'w', encoding='utf-8') as file:
            json.dump(user_info, file, ensure_ascii=False, indent=4)
    else:
        user_info['norm_of_water'] -= 0.25
        with open(f"users/user_info_{message.chat.id}.json", 'w', encoding='utf-8') as file:
            json.dump(user_info, file, ensure_ascii=False, indent=4)
    remaining = user_info['norm_of_water'] / 0.25
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è"))
    await message.answer(f"–í—ã –≤—ã–ø–∏–ª–∏ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã. –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å {user_info['norm_of_water']}–ª –≤–æ–¥—ã –∏–ª–∏ "
                        f" {remaining} —Å—Ç–∞–∫–∞–Ω–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
                        reply_markup=kb)


@dp.message_handler(text="–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")
async def food_entry(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–ó–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Å—ä–µ–ª–∏", reply_markup=kb)
    await FormFood.food.set()


@dp.message_handler(state=FormFood.food)
async def food_entry(message: types.Message, state: FSMContext):
    mes_del = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    mes, result = parse_pfc.parse_pfc(message.text)
    mes += '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—ä–µ–¥–µ–Ω–Ω–æ–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?'

    with open(f'users/user_info_{message.chat.id}.json', 'r+', encoding='utf-8') as file:
        user_info = json.load(file)
        user_info['intermediate_result'] = result
        file.seek(0)
        json.dump(user_info, file, ensure_ascii=False, indent=4)
        file.truncate()
        
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–î–∞")).row(
        types.KeyboardButton('–ù–µ—Ç'))
    await bot.delete_message(chat_id=message.chat.id, message_id=mes_del.message_id)
    await message.answer(mes, reply_markup=kb)
    await state.finish()


@dp.message_handler(text="–î–∞")
async def add_to_food_diary(message: types.Message):
    with open(f'users/user_info_{message.chat.id}.json', 'r+', encoding='utf-8') as file:
        user_info = json.load(file)

        # Rewrite file with a new data
        user_info['calories'] += user_info['intermediate_result']['sum_calories']
        user_info['pfc']['proteins'] += user_info['intermediate_result']['sum_protein']
        user_info['pfc']['fats'] += user_info['intermediate_result']['sum_fat']
        user_info['pfc']['carbohydrates'] += user_info['intermediate_result']['sum_carbohydrate']

        file.seek(0)
        json.dump(user_info, file, ensure_ascii=False, indent=4)
        file.truncate()
        
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è"))
    await message.answer(f'–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã —Å—ä–µ–ª–∏ {user_info["calories"]}/{user_info["norm_of_calories"]} –∫–∫–∞–ª\n–ë–ñ–£: \n'
                        f'{user_info["pfc"]["proteins"]}/{user_info["norm_of_pfc"]["proteins"]}\n'
                        f'{user_info["pfc"]["fats"]}/{user_info["norm_of_pfc"]["fats"]}\n'
                        f'{user_info["pfc"]["carbohydrates"]}/{user_info["norm_of_pfc"]["carbohydrates"]}',
                        reply_markup=kb)


@dp.message_handler(text="–ù–µ—Ç")
async def add_to_food_diary(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω")).row(
        types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏')).row(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=kb)

@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if message.chat.id in admins_id:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")).row('–ù–∞–∑–∞–¥')
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@dp.message_handler(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def mailing(message: types.Message):
    if message.chat.id in admins_id:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=types.ReplyKeyboardRemove())
        await AdminForm.text.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(state=AdminForm.text, content_types=['photo'])
async def mailing(message: types.Message, state: FSMContext):
    for user in os.listdir('users'):
        user = user.split('_')[-1].split('.')[0]
        if message.photo:
            await bot.send_photo(user, photo=message.photo[-1].file_id, caption=message.caption)
        else:
            await bot.send_message(user, message.text)
    logging.info("[INFO] Admin has sent a message")
    await state.finish()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",reply_markup=types.ReplyKeyboardMarkup
    (resize_keyboard=True).row(types.KeyboardButton(text="–ù–∞–∑–∞–¥")))


async def send_water_reminders():
        now = datetime.datetime.now()
        for user in os.listdir('users'):
            with open(f'users/{user}', 'r', encoding='utf-8') as file:
                user_info = json.load(file)
            if user_info.get('water_reminder') == 'on' and user_info['norm_of_water'] > 0:
                    #last_reminder_date = datetime.datetime.strptime(user_info['date_for_water'], "%Y-%m-%d").date()
                    #if last_reminder_date < now.date():
                chat_id = user.split('_')[-1].split('.')[0]
                await bot.send_message(chat_id, '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã!')
                user_info['date_for_water'] = now.strftime("%Y-%m-%d")
                with open(f'users/{user}', 'w', encoding='utf-8') as file:
                    json.dump(user_info, file, ensure_ascii=False, indent=4)

async def reset_calories_and_pfc():
    
    for user in os.listdir('users'):
        now = datetime.datetime.now()
        with open(f'users/{user}', 'r+', encoding='utf-8') as file:
            user_info = json.load(file)
            last_reset_date = datetime.datetime.strptime(user_info['date_for_calories_and_pfc'], "%Y-%m-%d").date()
            if last_reset_date < now.date():
                user_info['calories'] = 0
                user_info['pfc']['proteins'] = 0
                user_info['pfc']['fats'] = 0
                user_info['pfc']['carbohydrates'] = 0
                user_info['date_for_calories_and_pfc'] = now.strftime("%Y-%m-%d")
                file.seek(0)
                json.dump(user_info, file, ensure_ascii=False, indent=4)
                file.truncate()

async def scheduler():
    aioschedule.every().day.at("03:15").do(reset_calories_and_pfc)
    for hour in [10, 14, 18]:
        aioschedule.every().day.at(f"{hour}:00").do(send_water_reminders)
    aioschedule.every()
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(scheduler())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

